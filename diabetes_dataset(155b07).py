# -*- coding: utf-8 -*-
"""diabetes-dataset(155B07).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fIy_0kfFRLN_Iu19zypnsqitILF9jCwe
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

file_path = '/content/drive/MyDrive/BSI/Machine_Learning/diabetes.csv'
data = pd.read_csv(file_path)

print("Lima baris pertama dataset:")
print(data.head())
print("\nInformasi dataset:")
print(data.info())
print("\nStatistik dataset:")
print(data.describe())

print("\nApakah ada nilai kosong?")
print(data.isnull().sum())

X = data.drop('Outcome', axis=1)  # Semua kolom kecuali Outcome
y = data['Outcome']  # Kolom Outcome sebagai target

# Bagi data menjadi training dan testing (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

y_pred = rf_model.predict(X_test)

print("\nConfusion Matrix:")
conf_matrix = confusion_matrix(y_test, y_pred)
print(conf_matrix)

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nAccuracy Score:")
print(accuracy_score(y_test, y_pred))

# Visualisasi Confusion Matrix
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=['No', 'Yes'], yticklabels=['No', 'Yes'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

feature_importance = rf_model.feature_importances_
features = X.columns

# Plot Feature Importance
plt.figure(figsize=(10, 6))
plt.barh(features, feature_importance, color='skyblue')
plt.xlabel('Feature Importance')
plt.ylabel('Features')
plt.title('Feature Importance in Random Forest')
plt.show()

from sklearn.tree import DecisionTreeClassifier

c45_model = DecisionTreeClassifier(criterion='entropy', random_state=42)
c45_model.fit(X_train, y_train)

y_pred_c45 = c45_model.predict(X_test)

print("\n=== Evaluasi Model C4.5 ===")
print("Confusion Matrix (C4.5):")
conf_matrix_c45 = confusion_matrix(y_test, y_pred_c45)
print(conf_matrix_c45)

print("\nClassification Report (C4.5):")
print(classification_report(y_test, y_pred_c45))

print("\nAccuracy Score (C4.5):")
accuracy_c45 = accuracy_score(y_test, y_pred_c45)
print(accuracy_c45)

plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix_c45, annot=True, fmt='d', cmap='Oranges', xticklabels=['No', 'Yes'], yticklabels=['No', 'Yes'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix - C4.5')
plt.show()

accuracy_rf = accuracy_score(y_test, y_pred)

print("\n=== Perbandingan Akurasi ===")
print(f"Akurasi Random Forest: {accuracy_rf * 100:.2f}%")
print(f"Akurasi C4.5: {accuracy_c45 * 100:.2f}%")

plt.figure(figsize=(8, 5))
plt.bar(['Random Forest', 'C4.5'], [accuracy_rf, accuracy_c45], color=['skyblue', 'orange'])
plt.ylabel('Accuracy')
plt.title('Comparison of Model Accuracies')
plt.ylim(0, 1)  # Skala 0-100%
plt.show()

from sklearn.model_selection import cross_val_score

rf_accuracy = cross_val_score(rf_model, X, y, cv=5, scoring='accuracy').mean()
c45_accuracy = cross_val_score(c45_model, X, y, cv=5, scoring='accuracy').mean()

print(f"Akurasi Random Forest (cross-validation): {rf_accuracy * 100:.2f}%")
print(f"Akurasi C4.5 (cross-validation): {c45_accuracy * 100:.2f}%")